#!/bin/bash

set -e

usage() {
    cat << USAGE
Usage: $0 [options] <mode> system

Open a tunnel to the access gateway in the system for forwarding local traffic.

Available modes:

  client    Opens a SOCKS proxy for Datomic client
  analytics Opens an SSH tunnel for analytics support

Options:
  -p <profile>     AWS Profile to use with permissions to the system
  -r <region>      AWS Region of the system
  --port <port>    Local port to use for forwarding (default to 8182 for client, 8989 for analytics)
  --ssho <Option>  Pass ssh configuration options as if using ssh -o <option>

USAGE
    exit -1
}

# Get S3 Bucket for System
# Exits if no bucket found
# Arguments:
#   system - required
#   region arg - optional
#   profile command - optional
# Returns:
#   S3 Bucket Name
s3_bucket() {
    local system=$1
    local region_arg=$2
    local profile_command=$3
    local s3
    s3=$(aws resourcegroupstaggingapi get-resources $region_arg --resource-type-filters s3 --tag-filters Key=datomic:system,Values=$system --query "ResourceTagMappingList | [].ResourceARN" --output text $profile_command | sed -e 's/.*://g')
    if [ "$s3" == None ] || [ "$s3" == "" ]; then
        echo "Datomic system $system not found, make sure your system name and AWS creds are correct." >&2
        exit 1
    fi
    echo "$s3"
}

# Get Private Key for System, stores locally
# Exits if no gateway key found
# Arguments:
#   system - required
#   S3 bucket: required
#   region - optional
#   profile command - optional
# Returns:
#   local disk path to private key
fetch-pk() {
    local system=$1
    local s3_bucket=$2
    local region=$3
    local region_arg=$4
    local profile_command=$5
    local pk=~/.ssh/datomic-${region}-${system}-bastion
    aws s3 cp $profile_command $region_arg s3://${s3_bucket}/${system}/datomic/access/private-keys/bastion $pk >&2
    if [ "$?" -ne 0 ]; then
        echo "Unable to read gateway key, make sure your AWS creds are correct." >&2
        exit 1
    fi
    chmod 600 $pk
    echo $pk
}

# Gets the gateway ip for the system
# Exits if gateway ip not found
# Arguments:
#   system - required
#   region arg - optional
#   profile command - optional
# Returns:
#   gateway ip
gateway_ip() {
    local system=$1
    local region_arg=$2
    local profile_command=$3
    local gateway_ip
    gateway_ip=$(aws ec2 describe-instances $region_arg --filters Name=tag:Name,Values=${system}-bastion Name=instance-state-name,Values=running --query Reservations[0].Instances[0].PublicIpAddress --output text $profile_command)
    if [ "$?" -ne 0 ] || [ "${bastion_ip}" == None ]; then
        echo "Gateway not found, make sure gateway is running." >&2
        exit 1
    fi
    echo $gateway_ip
}


# Run client proxy as foreground process, does not return
# Globals:
#   SYSTEM
#   REGION
#   REGION_ARG
#   PROFILE_COMMAND
#   SOCKS_PORT
# Returns:
#   local disk path to private key
client() {
    local s3
    s3=$(s3_bucket $SYSTEM "$REGION_ARG" "$PROFILE_COMMAND")
    local pk
    pk=$(fetch-pk $SYSTEM $s3 $REGION "$REGION_ARG" "$PROFILE_COMMAND")
    local ip
    ip=$(gateway_ip $SYSTEM "$REGION_ARG" "$PROFILE_COMMAND")
    ssh -v "${SSH_OPTIONS[@]}" -i $pk -CND ${PORT:=8182} ec2-user@${ip}
}

analytics() {
    local s3
    s3=$(s3_bucket $SYSTEM "$REGION_ARG" "$PROFILE_COMMAND")
    local pk
    pk=$(fetch-pk $SYSTEM "$s3" $REGION "$REGION_ARG" "$PROFILE_COMMAND")
    local ip
    ip=$(gateway_ip $SYSTEM "$REGION_ARG" "$PROFILE_COMMAND")

    ssh -v "${SSH_OPTIONS[@]}" -i $pk -CNT -L ${PORT:=8989}:localhost:8989 ec2-user@${ip}
}

# parse params, set globals
POSITIONAL=()
SSH_OPTIONS=("-o IdentitiesOnly=yes")
while [ $# -gt 0 ]
do
    case "$1" in
        -h | --help )
            usage
            exit
            ;;
        -p)
            PROFILE_COMMAND="--profile $2"
            shift 2
            ;;
        -r)
            REGION=$2
            shift 2
            ;;
        --port)
            PORT=$2
            shift 2
            ;;
        --ssho)
            SSH_OPTIONS+=("-o $2")
            shift 2
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

set -- "${POSITIONAL[@]}"

if [ "$2" == "" ]; then
    usage $@
fi

SYSTEM=$2

if [ "$REGION" == "" ]; then
    REGION_ARG=
else
    REGION_ARG="--region $REGION"
fi

case "$1" in
    client)
        client
        ;;
    analytics)
        analytics
        ;;
    *)
        usage
        ;;
esac
